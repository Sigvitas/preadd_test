{"ast":null,"code":"import React,{useState}from\"react\";import\"./Analysis.css\";import mammoth from\"mammoth\";import{useNavigate}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Analysis(){const[fileName,setFileName]=useState(\"Not Selected\");const[crossWord,setCrossWord]=useState(\"Section Not Found\");const[fieldWord,setFieldWord]=useState(\"Section Not found\");const[backgroundWord,setBackgroundWord]=useState(\"Section Not found\");const[summaryWord,setSummaryWord]=useState(\"Section Not found\");const[drofDraWord,setDroofDraWord]=useState(\"Section Not found\");const[detaDesWord,setDetaDesWord]=useState(\"Section Not found\");const[claimedWord,setClaimedWord]=useState(\"Section Not found\");const[abstractWord,setAbstractWord]=useState(\"Section Not found\");const[fileContent,setFileContent]=useState(\"\");const[errorMessage,setErrorMessage]=useState(\"\");const[showFileContent,setShowFileContent]=useState(false);const[modifiedTitle,setModifiedTitle]=useState(\"Title Not found\");const[wordCount,setWordCount]=useState(0);const[imgCount,setImgCount]=useState(0);const[dependent,setdependent]=useState(0);const[independent,setIndependent]=useState(0);const[total,setTotal]=useState(0);const[sentenceCount,setSentenceCount]=useState(0);const[lineCount,setLineCount]=useState(0);const[showClaimContent,setShowClaimContent]=useState(false);const[independentClaimLists,setIndependentClaimLists]=useState(\"\");const[dependentClaimLists,setDependentClaimLists]=useState(\"\");const[selectedSections,setSelectedSections]=useState([]);const[showResult,setShowResult]=useState(false);const[showDrop,setShowDrop]=useState(false);const[isOpen,setIsOpen]=useState(false);const[sectionData,setSectionData]=useState([]);const[titleChar,setTitleChar]=useState(0);const navigate=useNavigate();//to handle the Radio Buttons\nconst handleRadioChange=event=>{const value=event.target.value;if(value===\"option1\"){setShowResult(true);setShowDrop(false);}else{setShowResult(false);setShowDrop(true);}};//to handle the dropdown (close/open)\nconst toggleDropdown=()=>{setIsOpen(!isOpen);};const toggleCheckbox=sectionName=>{debugger;if(selectedSections.includes(sectionName)){setSelectedSections(selectedSections.filter(name=>name!==sectionName));}else{setSelectedSections([...selectedSections,sectionName]);}};//handle the file input\nconst handleFileChange=async e=>{const file=e.target.files[0];const fileWithdep=e.target.files[0].name;const filename=fileWithdep.replace(\".docx\",\"\");setFileName(filename);if(!file){setErrorMessage(\"Please select a file.\");return;}const reader=new FileReader();reader.onload=async e=>{const content=e.target.result;try{// using the library to fetch data\nconst result=await mammoth.extractRawText({arrayBuffer:content});const text=result.value;//regular expression to extract title\nconst titleRegx=/([\\s\\S]*?)(cross-reference to related application|CROSS|Cross|technical|CROSS REFERENCE TO RELATED APPLICATIONS|What is claimed is|Claims|CLAIMS|WHAT IS CLAIMED IS|abstract|ABSTRACT|Cross-reference to related application|CROSS-REFERENCE TO RELATED APPLICATION|field|background|summary|description of the drawing|$)/i;const titlesec=titleRegx.exec(text);if(titlesec){const titlenames=titlesec[1];const titlename=titlenames.replace(/\\[\\d+\\]/g,\"\");const wordss=titlename.split(/\\s+/).filter(Boolean);const chars=titlename.replace(/\\s/g,\"\");setTitleChar(chars.length);setWordCount(wordss.length);setModifiedTitle(titlename);}const sectionData=[];//regular expression to extract Cross-reference\nconst crossregex=/(?:CROSS-REFERENCE TO RELATED APPLICATION|CROSS REFERENCE TO RELATED APPLICATION|Cross-reference to related application|Cross-Reference To Related Application|Related Applications)([\\s\\S]*?)(?:TECHNICAL FIELD|FIELD|Field|Background|BACKGROUND|Summary|SUMMARY|DESCRIPTION OF (?: THE) DRAWING|Description Of(?: The)? Drawing|DETAILED DESCRIPTION|WHAT IS CLAIMED IS|ABSTRACT|$)/;const crosssec=crossregex.exec(text);if(crosssec){debugger;const crosssection=crosssec[1];const filteredContentforCrossSection=crosssection.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");const wordsForCross=filteredContentforCrossSection.split(/\\s+/).filter(Boolean);const crosswordCount=wordsForCross.length;const crossCharCount=filteredContentforCrossSection.replace(/\\s/g,\"\").length;const crossSentCount=filteredContentforCrossSection.split(\".\").length;const crossLineCount=filteredContentforCrossSection.split(\"\\n\").filter(line=>line.trim()!==\"\").length;// const a = text.split(\"\\n\");\n// const b = a.filter((line) => line.trim() !== \"\").length;\nconst cr=crosssec[0].match(/^(.*?)(?=\\n|$)/);const cr1=cr[1].trim();sectionData.push({sName:cr1,sCount:crosswordCount,sChar:crossCharCount,sSent:crossSentCount,sLine:crossLineCount});setCrossWord(crosswordCount);console.log(\"aea\",crosswordCount);}//regular expression to extract Field Section\nconst fieldregex=/(?:FIELD|TECHNICAL FIELD|FIELD OF THE INVENTION|Field|Technical Field)([\\s\\S]*?)(?:BACKGROUND|Background|BRIEF DESCRIPTION OF THE INVENTION|Summary|SUMMARY|DESCRIPTION OF (?: THE) DRAWING|Description of (?: the) Drawing|DETAILED DESCRIPTION|detailed description|What is claimed is|CLAIMS|Abstract|ABSTRACT|CROSS-REFERENCE TO RELATED APPLICATION|$)/;const fieldsec=fieldregex.exec(text);if(fieldsec){const fieldsection=fieldsec[1];const filteredContentforFieldSection=fieldsection.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");debugger;const wordsForField=filteredContentforFieldSection.split(/\\s+/).filter(Boolean);const fieldWordCount=wordsForField.length;const fieldCharCount=filteredContentforFieldSection.replace(/\\s/g,\"\").length;const fieldSentCount=filteredContentforFieldSection.split(\".\").length;const fieldlineCount=filteredContentforFieldSection.split(\"\\n\").filter(line=>line.trim()!==\"\").length;setFieldWord(fieldWordCount);const fi=fieldsec[0].match(/^(.*?)(?=\\n|$)/);const fi1=fi[1].trim();sectionData.push({sName:fi1,sCount:fieldWordCount,sChar:fieldCharCount,sSent:fieldSentCount,sLine:fieldlineCount});console.log(\"fiel\",fieldWordCount);}//regular expression to extract Background Section\nconst backgrdregex=/(?:background|background of the invention)([\\s\\S]*?)(?:summary|brief description of the invention|description of (?: the) drawings|detailed description|what is claimed is|abstract|cross-reference to related application|field|$)/i;const backgrdsec=backgrdregex.exec(text);if(backgrdsec){const backgrdsection=backgrdsec[1];const filteredContentforBackgrdSection=backgrdsection.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");const wordsForBackground=filteredContentforBackgrdSection.split(/\\s+/).filter(Boolean);const backgrdWordCount=wordsForBackground.length;const ba=backgrdsec[0].match(/^(.*?)(?=\\n|$)/);const ba1=ba[1].trim();sectionData.push({sName:ba1,sCount:backgrdWordCount});setBackgroundWord(backgrdWordCount);console.log(\"back\",backgrdWordCount);}//regular expression to extract Summary Section\nconst summregex=/(?:SUMMARY|BRIEF DESCRIPTION OF THE INVENTION|BRIEF SUMMARY)([\\s\\S]*?)(?:DESCRIPTION OF (?: THE)? DRAWINGS|BRIEF DESCRIPTION OF DRAWINGS|detailed description|what is claimed is|claims|abstract|cross-reference to related application|field|background|$)/i;const summsec=summregex.exec(text);if(summsec){const summsection=summsec[1];const filteredContentforSumarySection=summsection.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");const wordsForSummary=filteredContentforSumarySection.split(/\\s+/).filter(Boolean);const summaryWordCount=wordsForSummary.length;const su=summsec[0].match(/^(.*?)(?=\\n|$)/);const su1=su[1].trim();sectionData.push({sName:su1,sCount:summaryWordCount});setSummaryWord(summaryWordCount);console.log(\"sum\",summaryWordCount);}//regular expression to extract Drawing Description  Section\nconst dodregex=/(?:Description of(?: the)? Drawings|DESCRIPTION OF(?: THE)? DRAWINGS)([\\s\\S]*?)(?:DETAILED DESCRIPTION|\\nDetailed Description|DESCRIPTION OF EMBODIMENTS|DESCRIPTION OF IMPLEMENTATIONS|DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS|What is claimed is|CLAIMS|ABSTRACT|CROSS-REFERENCE TO RELATED APPLICATION|FIELD|BACKGROUND|SUMMARY|BRIEF DESCRIPTION THE INVENTION|$)/;const dodsec=dodregex.exec(text);if(dodsec){const dodsection=dodsec[1];const filteredContentforDodSection=dodsection.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");const wordsForDod=filteredContentforDodSection.split(/\\s+/).filter(Boolean);const dodWordCount=wordsForDod.length;const dd=dodsec[0].match(/^(.*?)(?=\\n|$)/);const dd1=dd[1].trim();sectionData.push({sName:dd1,sCount:dodWordCount});setDroofDraWord(dodWordCount);console.log(\"dod\",dodWordCount);}//regular expression to extract Detailed Description Section\nconst detDesregex=/(?:\\nDetailed Description|DETAILED DESCRIPTION|DESCRIPTION OF EMBODIMENTS|DESCRIPTION OF IMPLEMENTATIONS|DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS)([\\s\\S]*?)(?:What is claimed is|Claims|WHAT IS CLAIMED IS|CLAIMS|abstract|ABSTRACT|Cross-reference to related application|CROSS-REFERENCE TO RELATED APPLICATION|FIELD|BACKGROUND|SUMMARY|$)/;const detDessec=detDesregex.exec(text);if(detDessec){const detDessection=detDessec[1];const filteredContentforDetDesSection=detDessection.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");const wordsForDetDes=filteredContentforDetDesSection.split(/\\s+/).filter(Boolean);const detDesWordCount=wordsForDetDes.length;const dt=detDessec[0].match(/^(.*?)(?=\\n|$)/);const dt1=dt[1].trim();sectionData.push({sName:dt1,sCount:detDesWordCount});setDetaDesWord(detDesWordCount);console.log(\"det\",detDesWordCount);}//regular expression to extract Claim Section\nconst claimregex=/(?:What is claimed is|Claims|CLAIMS|WHAT IS CLAIMED IS)([\\s\\S]*?)(?:abstract|ABSTRACT|Related Applications|Cross-reference to related application|CROSS-REFERENCE TO RELATED APPLICATION|FIELD|Field|BACKGROUND|SUMMARY|$)/;const claimsec=claimregex.exec(text);if(claimsec){debugger;const claimsection=claimsec[1];const claimsection1=claimsection.replace(/what is claimed is:/i,\"\");const linesa=claimsection1.split(/(?<=\\.)\\s+/).filter(line=>line.includes(\".\"));const filteredLines=linesa.filter(line=>line.trim().length>=40&&!/^\\s*[\\d\\n\\t\\s]+\\.?$|^:\\s*\\n{1,10}CLAIMS\\s*\\n{1,10}1\\./.test(line));console.log(\"claims\",linesa);console.log(\"claims1\",filteredLines);let independentClaimCount=0;let dependentClaimCount=0;const independentClaims=[];const dependentClaims=[];for(let i=0;i<filteredLines.length;i++){const line=filteredLines[i];const words=line.split(/\\s+/).filter(Boolean);const wordCount=words.length;if(/claim\\s+(\\d+)/i.test(line)){dependentClaims.push(\"claim \".concat(i+1,\" - \").concat(wordCount,\" words\"));dependentClaimCount++;}else{independentClaims.push(\"claim \".concat(i+1,\" - \").concat(wordCount,\" words\"));independentClaimCount++;}}setTotal(filteredLines.length);setIndependent(independentClaimCount);setdependent(dependentClaimCount);setIndependentClaimLists(independentClaims.join(\"\\n\"));setDependentClaimLists(dependentClaims.join(\"\\n \"));const filteredContentforClaimSection=claimsection.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");const wordsForDetClaim=filteredContentforClaimSection.split(/\\s+/).filter(Boolean);const claimWordCount=wordsForDetClaim.length;const cl=claimsec[0].match(/^(.*?)(?=\\n|$)/);const cl1=cl[1].trim();sectionData.push({sName:cl1,sCount:claimWordCount});setClaimedWord(claimWordCount);console.log(\"claim\",claimWordCount);}// regular expression to extract Abstract Section\nconst abstractregex=/(?: Abstract|ABSTRACT|Abstract of the Disclosure)([\\s\\S]*?)(?:What is claimed is|Claims|CLAIMS|CROSS-REFERENCE |cross-reference to related application|field|background|summary|description of the drawing|$)/;const abssec=abstractregex.exec(text);if(abssec){const abssection=abssec[1];const filteredContentforAbstractSection=abssection.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");const wordsForDetAbs=filteredContentforAbstractSection.split(/\\s+/).filter(Boolean);const absWordCount=wordsForDetAbs.length;const ab=abssec[0].match(/^(.*?)(?=\\n|$)/);const ab1=ab[1].trim();sectionData.push({sName:ab1,sCount:absWordCount});setSectionData(sectionData);setAbstractWord(absWordCount);console.log(\"abs\",absWordCount);}console.log(\"ajaha\",sectionData);// to count figures\nconst figRegex=/(?:Description of(?: the)? Drawings|DESCRIPTION OF(?: THE)? DRAWINGS)([\\s\\S]*?)(?:DETAILED DESCRIPTION|\\nDetailed Description|DESCRIPTION OF EMBODIMENTS|DESCRIPTION OF IMPLEMENTATIONS|DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS|What is claimed is|CLAIMS|ABSTRACT|CROSS-REFERENCE TO RELATED APPLICATION|FIELD|BACKGROUND|SUMMARY|BRIEF DESCRIPTION THE INVENTION|$)/;const descriptionMatches=figRegex.exec(text);if(descriptionMatches){const descriptionText=descriptionMatches[1];const imageRegex1=/(?:FIG(?:URE)?)\\.?[-\\s]?(?:\\d+|[IVXLCDM]+)[A-Z]?(?:\\([\\w\\s]+\\))?\\b/gi;const matches=descriptionText.match(imageRegex1);const uniqueMatches=[...new Set(matches)];const matchesWithoutanyWord=uniqueMatches.filter(match=>!/\\bfigured\\b/i.test(match)&&!/\\bfiguring\\b/i.test(match));console.log(\"aa\",matchesWithoutanyWord);const Rx1=matchesWithoutanyWord.length;const figsRomanRegex=/FIGS(?:URES?)?\\.\\s(?:\\d+|[IVXLCDM]+)(?:[A-Za-z]?(?:\\sAND\\s(?:\\d+|[IVXLCDM]+)[A-Za-z]?)+)?/i;const matches2=descriptionText.match(figsRomanRegex);const unique=[...new Set(matches2)];console.log(\"aaa\",unique);const Rx2=unique.length*2;const totalFigs=Rx1+Rx2;setImgCount(totalFigs);//   const imageRegex =\n//     /FIGS\\.\\s?\\d+([A-Za-z\\(\\)]+)?\\s?(?:to(?!.*and)|-(?!.*and))\\s?\\d+([A-Za-z\\(\\)]+)?/gi;\n//   const matches1 = descriptionText.match(imageRegex);\n//   const uniqueMatches1 = [...new Set(matches1)]; \n//   console.log(\"jii\", uniqueMatches1);\n}setFileContent(text);setSentenceCount(text.split(\".\").length);const a=text.split(\"\\n\");const b=a.filter(line=>line.trim()!==\"\").length;setLineCount(b);setErrorMessage(\"\");}catch(error){setErrorMessage(\"Error reading the .docx file.\");}};reader.onerror=()=>{setErrorMessage(\"Error reading the file.\");};reader.readAsArrayBuffer(file);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigate(\"/Mannual\"),children:\"Enter manually\"})}),/*#__PURE__*/_jsx(\"div\",{style:{letterSpacing:0,top:0,width:\"100%\",backgroundColor:\"\",color:\"white\",padding:\"20px\",textAlign:\"center\",textDecoration:\"underline\",textDecorationColor:\"#03e9f4\"},children:/*#__PURE__*/_jsx(\"h1\",{children:\"Patent Reader\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:handleFileChange}),errorMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:errorMessage}),/*#__PURE__*/_jsxs(\"div\",{className:\"result\",style:{marginBottom:\"4%\"},children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Title: \",modifiedTitle]}),/*#__PURE__*/_jsxs(\"p\",{children:[\" Word Count :\",wordCount]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Character Count :\",titleChar]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"radio-buttons\",style:{marginBottom:\"4%\"},children:[/*#__PURE__*/_jsxs(\"label\",{className:\"radio\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"radioGroup\",value:\"option1\",onChange:handleRadioChange}),\"All Section Analysis\"]}),/*#__PURE__*/_jsxs(\"label\",{className:\"radio\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"radioGroup\",value:\"option2\",onChange:handleRadioChange}),\"Specific Section Analysis\"]})]}),showResult&&/*#__PURE__*/_jsxs(\"div\",{className:\"result\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Cross-Reference :\",/*#__PURE__*/_jsx(\"strong\",{children:crossWord}),\" \"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Technical Field :\",/*#__PURE__*/_jsx(\"strong\",{children:fieldWord})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Background :\",/*#__PURE__*/_jsx(\"strong\",{children:backgroundWord})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Summary : \",/*#__PURE__*/_jsx(\"strong\",{children:summaryWord})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Description of Drawing :\",/*#__PURE__*/_jsxs(\"strong\",{children:[\" \",drofDraWord]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total Number of Figures:\",/*#__PURE__*/_jsx(\"strong\",{children:imgCount})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\" Detailed Description : \",/*#__PURE__*/_jsx(\"strong\",{children:detaDesWord})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Claims :\",/*#__PURE__*/_jsx(\"strong\",{children:claimedWord})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Abstract : \",/*#__PURE__*/_jsx(\"strong\",{children:abstractWord})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total lines: \",/*#__PURE__*/_jsx(\"strong\",{children:lineCount})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total word count: \",/*#__PURE__*/_jsx(\"strong\",{children:fileContent.split(/\\s+/).filter(Boolean).length})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total character count: \",/*#__PURE__*/_jsx(\"strong\",{children:fileContent.replace(/\\s/g,\"\").length})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total sentence count: \",/*#__PURE__*/_jsx(\"strong\",{children:sentenceCount})]})]}),showDrop&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"details\",{className:\"custom-dropdown\",style:{marginBottom:'4%',width:\"100%\"},children:[/*#__PURE__*/_jsx(\"summary\",{onClick:toggleDropdown,children:\"Select Sections\"}),isOpen&&/*#__PURE__*/_jsx(\"ul\",{className:\"custom-dropdown-list\",children:sectionData.map((section,index)=>/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:selectedSections.includes(section.sName),onChange:()=>toggleCheckbox(section.sName)}),/*#__PURE__*/_jsx(\"span\",{style:{marginLeft:'10px'},children:section.sName})]})},index))})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"result\",children:[/*#__PURE__*/_jsx(\"div\",{style:{textDecoration:\"underline\",textDecorationColor:\"#0a0909\",marginBottom:'2%'},children:\"Word Count of Selected Sections:\"}),selectedSections.map((sectionName,index)=>{const selectedSection=sectionData.find(section=>section.sName===sectionName);return/*#__PURE__*/_jsxs(\"div\",{children:[\"\".concat(selectedSection.sName,\" : \"),/*#__PURE__*/_jsx(\"strong\",{children:selectedSection.sCount})]},index);})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\",marginTop:\"2%\"},children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowFileContent(!showFileContent),children:[showFileContent?\"hide\":\"view\",\" content\"]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowClaimContent(!showClaimContent),children:[showClaimContent?\"hide\":\"view\",\" Claims\"]})})]}),showFileContent&&/*#__PURE__*/_jsxs(\"div\",{className:\"file-content\",style:{textAlign:\"center\"},children:[/*#__PURE__*/_jsxs(\"h2\",{style:{color:\"white\",textDecoration:\"underline\",textDecorationColor:\"#03e9f4\"},children:[\"File Content : \",\"  \"+fileName]}),/*#__PURE__*/_jsx(\"p\",{style:{whiteSpace:\"pre-wrap\",textAlign:\"left\",backgroundColor:\"white\",margin:\"0\"},children:fileContent.split(\"\\n\").reduce((acc,line)=>{const trimmedLine=line.trim();const modifiedLine=trimmedLine.replace(/\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\"\");if(modifiedLine){acc.push(modifiedLine);}else if(!acc[acc.length-1]){return acc;}else{acc.push(\"\");}return acc;},[]).join(\"\\n\")})]}),showClaimContent&&/*#__PURE__*/_jsxs(\"div\",{className:\"claim-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"CLAIMS:\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total Claims:\",total]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Independent Claims:\",independent]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Dependent Claims:\",dependent]}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"b\",{children:\"Independent Claims List:\"})}),/*#__PURE__*/_jsx(\"pre\",{children:independentClaimLists}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"b\",{children:\"Dependent Claims:\"})}),/*#__PURE__*/_jsx(\"pre\",{children:dependentClaimLists})]})]});}export default Analysis;","map":{"version":3,"names":["React","useState","mammoth","useNavigate","jsx","_jsx","jsxs","_jsxs","Analysis","fileName","setFileName","crossWord","setCrossWord","fieldWord","setFieldWord","backgroundWord","setBackgroundWord","summaryWord","setSummaryWord","drofDraWord","setDroofDraWord","detaDesWord","setDetaDesWord","claimedWord","setClaimedWord","abstractWord","setAbstractWord","fileContent","setFileContent","errorMessage","setErrorMessage","showFileContent","setShowFileContent","modifiedTitle","setModifiedTitle","wordCount","setWordCount","imgCount","setImgCount","dependent","setdependent","independent","setIndependent","total","setTotal","sentenceCount","setSentenceCount","lineCount","setLineCount","showClaimContent","setShowClaimContent","independentClaimLists","setIndependentClaimLists","dependentClaimLists","setDependentClaimLists","selectedSections","setSelectedSections","showResult","setShowResult","showDrop","setShowDrop","isOpen","setIsOpen","sectionData","setSectionData","titleChar","setTitleChar","navigate","handleRadioChange","event","value","target","toggleDropdown","toggleCheckbox","sectionName","includes","filter","name","handleFileChange","e","file","files","fileWithdep","filename","replace","reader","FileReader","onload","content","result","extractRawText","arrayBuffer","text","titleRegx","titlesec","exec","titlenames","titlename","wordss","split","Boolean","chars","length","crossregex","crosssec","crosssection","filteredContentforCrossSection","wordsForCross","crosswordCount","crossCharCount","crossSentCount","crossLineCount","line","trim","cr","match","cr1","push","sName","sCount","sChar","sSent","sLine","console","log","fieldregex","fieldsec","fieldsection","filteredContentforFieldSection","wordsForField","fieldWordCount","fieldCharCount","fieldSentCount","fieldlineCount","fi","fi1","backgrdregex","backgrdsec","backgrdsection","filteredContentforBackgrdSection","wordsForBackground","backgrdWordCount","ba","ba1","summregex","summsec","summsection","filteredContentforSumarySection","wordsForSummary","summaryWordCount","su","su1","dodregex","dodsec","dodsection","filteredContentforDodSection","wordsForDod","dodWordCount","dd","dd1","detDesregex","detDessec","detDessection","filteredContentforDetDesSection","wordsForDetDes","detDesWordCount","dt","dt1","claimregex","claimsec","claimsection","claimsection1","linesa","filteredLines","test","independentClaimCount","dependentClaimCount","independentClaims","dependentClaims","i","words","concat","join","filteredContentforClaimSection","wordsForDetClaim","claimWordCount","cl","cl1","abstractregex","abssec","abssection","filteredContentforAbstractSection","wordsForDetAbs","absWordCount","ab","ab1","figRegex","descriptionMatches","descriptionText","imageRegex1","matches","uniqueMatches","Set","matchesWithoutanyWord","Rx1","figsRomanRegex","matches2","unique","Rx2","totalFigs","a","b","error","onerror","readAsArrayBuffer","className","children","onClick","style","letterSpacing","top","width","backgroundColor","color","padding","textAlign","textDecoration","textDecorationColor","type","onChange","marginBottom","map","section","index","checked","marginLeft","selectedSection","find","display","flexDirection","justifyContent","marginTop","whiteSpace","margin","reduce","acc","trimmedLine","modifiedLine"],"sources":["/workspaces/preadd_test/src/Analysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Analysis.css\";\r\nimport mammoth from \"mammoth\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Analysis() {\r\n  const [fileName, setFileName] = useState(\"Not Selected\");\r\n  const [crossWord, setCrossWord] = useState(\"Section Not Found\");\r\n  const [fieldWord, setFieldWord] = useState(\"Section Not found\");\r\n  const [backgroundWord, setBackgroundWord] = useState(\"Section Not found\");\r\n  const [summaryWord, setSummaryWord] = useState(\"Section Not found\");\r\n  const [drofDraWord, setDroofDraWord] = useState(\"Section Not found\");\r\n  const [detaDesWord, setDetaDesWord] = useState(\"Section Not found\");\r\n  const [claimedWord, setClaimedWord] = useState(\"Section Not found\");\r\n  const [abstractWord, setAbstractWord] = useState(\"Section Not found\");\r\n  const [fileContent, setFileContent] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [showFileContent, setShowFileContent] = useState(false);\r\n  const [modifiedTitle, setModifiedTitle] = useState(\"Title Not found\");\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [imgCount, setImgCount] = useState(0);\r\n  const [dependent, setdependent] = useState(0);\r\n  const [independent, setIndependent] = useState(0);\r\n  const [total, setTotal] = useState(0);\r\n  const [sentenceCount, setSentenceCount] = useState(0);\r\n  const [lineCount, setLineCount] = useState(0);\r\n  const [showClaimContent, setShowClaimContent] = useState(false);\r\n  const [independentClaimLists, setIndependentClaimLists] = useState(\"\");\r\n  const [dependentClaimLists, setDependentClaimLists] = useState(\"\");\r\n  const [selectedSections, setSelectedSections] = useState([]);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [showDrop, setShowDrop] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [sectionData, setSectionData] = useState([]);\r\n  const [titleChar, setTitleChar] = useState(0);\r\n  const navigate = useNavigate();\r\n\r\n  //to handle the Radio Buttons\r\n  const handleRadioChange = (event) => {\r\n    const value = event.target.value;\r\n    if (value === \"option1\") {\r\n      setShowResult(true);\r\n      setShowDrop(false);\r\n    } else {\r\n      setShowResult(false);\r\n      setShowDrop(true);\r\n    }\r\n  };\r\n\r\n  //to handle the dropdown (close/open)\r\n  const toggleDropdown = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n \r\n\r\n  const toggleCheckbox = (sectionName) => {\r\n    debugger\r\n    if (selectedSections.includes(sectionName)) {\r\n      setSelectedSections(\r\n        selectedSections.filter((name) => name !== sectionName)\r\n      );\r\n    } else {\r\n      setSelectedSections([...selectedSections, sectionName]);\r\n    }\r\n  };\r\n\r\n  //handle the file input\r\n  const handleFileChange = async (e) => {\r\n    const file = e.target.files[0];\r\n    const fileWithdep = e.target.files[0].name;\r\n    const filename = fileWithdep.replace(\".docx\", \"\");\r\n    setFileName(filename);\r\n    if (!file) {\r\n      setErrorMessage(\"Please select a file.\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (e) => {\r\n      const content = e.target.result;\r\n      try {\r\n        // using the library to fetch data\r\n        const result = await mammoth.extractRawText({ arrayBuffer: content });\r\n        const text = result.value;\r\n\r\n        //regular expression to extract title\r\n        const titleRegx =\r\n          /([\\s\\S]*?)(cross-reference to related application|CROSS|Cross|technical|CROSS REFERENCE TO RELATED APPLICATIONS|What is claimed is|Claims|CLAIMS|WHAT IS CLAIMED IS|abstract|ABSTRACT|Cross-reference to related application|CROSS-REFERENCE TO RELATED APPLICATION|field|background|summary|description of the drawing|$)/i;\r\n        const titlesec = titleRegx.exec(text);\r\n        if (titlesec) {\r\n          const titlenames = titlesec[1];\r\n          const titlename = titlenames.replace(/\\[\\d+\\]/g, \"\");\r\n\r\n          const wordss = titlename.split(/\\s+/).filter(Boolean);\r\n          const chars = titlename.replace(/\\s/g, \"\");\r\n          setTitleChar(chars.length);\r\n          setWordCount(wordss.length);\r\n          setModifiedTitle(titlename);\r\n        }\r\n\r\n        const sectionData = [];\r\n        //regular expression to extract Cross-reference\r\n        const crossregex =\r\n          /(?:CROSS-REFERENCE TO RELATED APPLICATION|CROSS REFERENCE TO RELATED APPLICATION|Cross-reference to related application|Cross-Reference To Related Application|Related Applications)([\\s\\S]*?)(?:TECHNICAL FIELD|FIELD|Field|Background|BACKGROUND|Summary|SUMMARY|DESCRIPTION OF (?: THE) DRAWING|Description Of(?: The)? Drawing|DETAILED DESCRIPTION|WHAT IS CLAIMED IS|ABSTRACT|$)/;\r\n\r\n        const crosssec = crossregex.exec(text);\r\n        if (crosssec) {\r\n          debugger\r\n          const crosssection = crosssec[1];\r\n\r\n          const filteredContentforCrossSection = crosssection.replace(\r\n            /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n            \"\"\r\n          );\r\n          const wordsForCross = filteredContentforCrossSection\r\n            .split(/\\s+/)\r\n            .filter(Boolean);\r\n          const crosswordCount = wordsForCross.length;\r\n          const crossCharCount = filteredContentforCrossSection.replace(/\\s/g,\"\").length;\r\n          const crossSentCount = filteredContentforCrossSection.split(\".\").length;\r\n          const crossLineCount = filteredContentforCrossSection.split(\"\\n\").filter((line)=>line.trim()!==\"\").length;\r\n          \r\n        // const a = text.split(\"\\n\");\r\n        // const b = a.filter((line) => line.trim() !== \"\").length;\r\n          const cr = crosssec[0].match(/^(.*?)(?=\\n|$)/);\r\n          const cr1 = cr[1].trim();\r\n          sectionData.push({ sName: cr1, sCount: crosswordCount , sChar:crossCharCount, sSent:crossSentCount, sLine:crossLineCount });\r\n          setCrossWord(crosswordCount);\r\n          console.log(\"aea\", crosswordCount);\r\n        }\r\n\r\n        //regular expression to extract Field Section\r\n        const fieldregex =\r\n          /(?:FIELD|TECHNICAL FIELD|FIELD OF THE INVENTION|Field|Technical Field)([\\s\\S]*?)(?:BACKGROUND|Background|BRIEF DESCRIPTION OF THE INVENTION|Summary|SUMMARY|DESCRIPTION OF (?: THE) DRAWING|Description of (?: the) Drawing|DETAILED DESCRIPTION|detailed description|What is claimed is|CLAIMS|Abstract|ABSTRACT|CROSS-REFERENCE TO RELATED APPLICATION|$)/;\r\n        const fieldsec = fieldregex.exec(text);\r\n        if (fieldsec) {\r\n          const fieldsection = fieldsec[1];\r\n          const filteredContentforFieldSection = fieldsection.replace(\r\n            /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n            \"\"\r\n          );\r\n          debugger\r\n          const wordsForField = filteredContentforFieldSection\r\n            .split(/\\s+/)\r\n            .filter(Boolean);\r\n          const fieldWordCount = wordsForField.length;\r\n          const fieldCharCount = filteredContentforFieldSection.replace(/\\s/g,\"\").length;\r\n          const fieldSentCount = filteredContentforFieldSection.split(\".\").length;\r\n          const fieldlineCount = filteredContentforFieldSection.split(\"\\n\").filter((line)=>line.trim()!==\"\").length;\r\n\r\n          setFieldWord(fieldWordCount);\r\n          const fi = fieldsec[0].match(/^(.*?)(?=\\n|$)/);\r\n          const fi1 = fi[1].trim();\r\n          sectionData.push({ sName: fi1, sCount: fieldWordCount, sChar:fieldCharCount , sSent:fieldSentCount, sLine:fieldlineCount });\r\n\r\n          console.log(\"fiel\", fieldWordCount);\r\n        }\r\n        //regular expression to extract Background Section\r\n        const backgrdregex =\r\n          /(?:background|background of the invention)([\\s\\S]*?)(?:summary|brief description of the invention|description of (?: the) drawings|detailed description|what is claimed is|abstract|cross-reference to related application|field|$)/i;\r\n        const backgrdsec = backgrdregex.exec(text);\r\n        if (backgrdsec) {\r\n          const backgrdsection = backgrdsec[1];\r\n          const filteredContentforBackgrdSection = backgrdsection.replace(\r\n            /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n            \"\"\r\n          );\r\n          const wordsForBackground = filteredContentforBackgrdSection\r\n            .split(/\\s+/)\r\n            .filter(Boolean);\r\n          const backgrdWordCount = wordsForBackground.length;\r\n          const ba = backgrdsec[0].match(/^(.*?)(?=\\n|$)/);\r\n          const ba1 = ba[1].trim();\r\n          sectionData.push({ sName: ba1, sCount: backgrdWordCount });\r\n          setBackgroundWord(backgrdWordCount);\r\n          console.log(\"back\", backgrdWordCount);\r\n        }\r\n\r\n        //regular expression to extract Summary Section\r\n        const summregex =\r\n          /(?:SUMMARY|BRIEF DESCRIPTION OF THE INVENTION|BRIEF SUMMARY)([\\s\\S]*?)(?:DESCRIPTION OF (?: THE)? DRAWINGS|BRIEF DESCRIPTION OF DRAWINGS|detailed description|what is claimed is|claims|abstract|cross-reference to related application|field|background|$)/i;\r\n        const summsec = summregex.exec(text);\r\n        if (summsec) {\r\n          const summsection = summsec[1];\r\n          const filteredContentforSumarySection = summsection.replace(\r\n            /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n            \"\"\r\n          );\r\n          const wordsForSummary = filteredContentforSumarySection\r\n            .split(/\\s+/)\r\n            .filter(Boolean);\r\n          const summaryWordCount = wordsForSummary.length;\r\n          const su = summsec[0].match(/^(.*?)(?=\\n|$)/);\r\n          const su1 = su[1].trim();\r\n          sectionData.push({ sName: su1, sCount: summaryWordCount });\r\n          setSummaryWord(summaryWordCount);\r\n          console.log(\"sum\", summaryWordCount);\r\n        }\r\n\r\n        //regular expression to extract Drawing Description  Section\r\n        const dodregex =\r\n          /(?:Description of(?: the)? Drawings|DESCRIPTION OF(?: THE)? DRAWINGS)([\\s\\S]*?)(?:DETAILED DESCRIPTION|\\nDetailed Description|DESCRIPTION OF EMBODIMENTS|DESCRIPTION OF IMPLEMENTATIONS|DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS|What is claimed is|CLAIMS|ABSTRACT|CROSS-REFERENCE TO RELATED APPLICATION|FIELD|BACKGROUND|SUMMARY|BRIEF DESCRIPTION THE INVENTION|$)/;\r\n        const dodsec = dodregex.exec(text);\r\n        if (dodsec) {\r\n          const dodsection = dodsec[1];\r\n          const filteredContentforDodSection = dodsection.replace(\r\n            /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n            \"\"\r\n          );\r\n          const wordsForDod = filteredContentforDodSection\r\n            .split(/\\s+/)\r\n            .filter(Boolean);\r\n          const dodWordCount = wordsForDod.length;\r\n          const dd = dodsec[0].match(/^(.*?)(?=\\n|$)/);\r\n          const dd1 = dd[1].trim();\r\n          sectionData.push({ sName: dd1, sCount: dodWordCount });\r\n          setDroofDraWord(dodWordCount);\r\n          console.log(\"dod\", dodWordCount);\r\n        }\r\n\r\n        //regular expression to extract Detailed Description Section\r\n        const detDesregex =\r\n          /(?:\\nDetailed Description|DETAILED DESCRIPTION|DESCRIPTION OF EMBODIMENTS|DESCRIPTION OF IMPLEMENTATIONS|DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS)([\\s\\S]*?)(?:What is claimed is|Claims|WHAT IS CLAIMED IS|CLAIMS|abstract|ABSTRACT|Cross-reference to related application|CROSS-REFERENCE TO RELATED APPLICATION|FIELD|BACKGROUND|SUMMARY|$)/;\r\n\r\n        const detDessec = detDesregex.exec(text);\r\n        if (detDessec) {\r\n          const detDessection = detDessec[1];\r\n          const filteredContentforDetDesSection = detDessection.replace(\r\n            /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n            \"\"\r\n          );\r\n          const wordsForDetDes = filteredContentforDetDesSection\r\n            .split(/\\s+/)\r\n            .filter(Boolean);\r\n          const detDesWordCount = wordsForDetDes.length;\r\n          const dt = detDessec[0].match(/^(.*?)(?=\\n|$)/);\r\n          const dt1 = dt[1].trim();\r\n          sectionData.push({ sName: dt1, sCount: detDesWordCount });\r\n          setDetaDesWord(detDesWordCount);\r\n          console.log(\"det\", detDesWordCount);\r\n        }\r\n        //regular expression to extract Claim Section\r\n        const claimregex =\r\n          /(?:What is claimed is|Claims|CLAIMS|WHAT IS CLAIMED IS)([\\s\\S]*?)(?:abstract|ABSTRACT|Related Applications|Cross-reference to related application|CROSS-REFERENCE TO RELATED APPLICATION|FIELD|Field|BACKGROUND|SUMMARY|$)/;\r\n\r\n        const claimsec = claimregex.exec(text);\r\n\r\n        if (claimsec) {\r\n          debugger\r\n          const claimsection = claimsec[1];\r\n          const claimsection1 = claimsection.replace(\r\n            /what is claimed is:/i,\r\n            \"\"\r\n          );\r\n          const linesa = claimsection1\r\n            .split(/(?<=\\.)\\s+/)\r\n            .filter((line) => line.includes(\".\"));\r\n\r\n\r\n          const filteredLines = linesa.filter(\r\n            (line) =>\r\n              line.trim().length >= 40 &&\r\n              !/^\\s*[\\d\\n\\t\\s]+\\.?$|^:\\s*\\n{1,10}CLAIMS\\s*\\n{1,10}1\\./.test(\r\n                line\r\n              )\r\n          );\r\n\r\n          console.log(\"claims\", linesa);\r\n          console.log(\"claims1\", filteredLines);\r\n\r\n          let independentClaimCount = 0;\r\n          let dependentClaimCount = 0;\r\n          const independentClaims = [];\r\n          const dependentClaims = [];\r\n\r\n          for (let i = 0; i < filteredLines.length; i++) {\r\n            const line = filteredLines[i];\r\n            const words = line.split(/\\s+/).filter(Boolean);\r\n            const wordCount = words.length;\r\n            if (/claim\\s+(\\d+)/i.test(line)) {\r\n              dependentClaims.push(`claim ${i + 1} - ${wordCount} words`);\r\n              dependentClaimCount++;\r\n            } else {\r\n              independentClaims.push(`claim ${i + 1} - ${wordCount} words`);\r\n              independentClaimCount++;\r\n            }\r\n          }\r\n\r\n          setTotal(filteredLines.length);\r\n          setIndependent(independentClaimCount);\r\n          setdependent(dependentClaimCount);\r\n          setIndependentClaimLists(independentClaims.join(\"\\n\"));\r\n          setDependentClaimLists(dependentClaims.join(\"\\n \"));\r\n\r\n          const filteredContentforClaimSection = claimsection.replace(\r\n            /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n            \"\"\r\n          );\r\n\r\n          const wordsForDetClaim = filteredContentforClaimSection\r\n            .split(/\\s+/)\r\n            .filter(Boolean);\r\n          const claimWordCount = wordsForDetClaim.length;\r\n          const cl = claimsec[0].match(/^(.*?)(?=\\n|$)/);\r\n          const cl1 = cl[1].trim();\r\n          sectionData.push({ sName: cl1, sCount: claimWordCount });\r\n          setClaimedWord(claimWordCount);\r\n          console.log(\"claim\", claimWordCount);\r\n        }\r\n\r\n        // regular expression to extract Abstract Section\r\n        const abstractregex =\r\n          /(?: Abstract|ABSTRACT|Abstract of the Disclosure)([\\s\\S]*?)(?:What is claimed is|Claims|CLAIMS|CROSS-REFERENCE |cross-reference to related application|field|background|summary|description of the drawing|$)/;\r\n\r\n        const abssec = abstractregex.exec(text);\r\n        if (abssec) {\r\n          const abssection = abssec[1];\r\n          const filteredContentforAbstractSection = abssection.replace(\r\n            /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n            \"\"\r\n          );\r\n          const wordsForDetAbs = filteredContentforAbstractSection\r\n            .split(/\\s+/)\r\n            .filter(Boolean);\r\n          const absWordCount = wordsForDetAbs.length;\r\n          const ab = abssec[0].match(/^(.*?)(?=\\n|$)/);\r\n          const ab1 = ab[1].trim();\r\n          sectionData.push({ sName: ab1, sCount: absWordCount });\r\n          setSectionData(sectionData);\r\n\r\n          setAbstractWord(absWordCount);\r\n          console.log(\"abs\", absWordCount);\r\n        }\r\n        console.log(\"ajaha\", sectionData);\r\n\r\n        // to count figures\r\n        const figRegex =\r\n          /(?:Description of(?: the)? Drawings|DESCRIPTION OF(?: THE)? DRAWINGS)([\\s\\S]*?)(?:DETAILED DESCRIPTION|\\nDetailed Description|DESCRIPTION OF EMBODIMENTS|DESCRIPTION OF IMPLEMENTATIONS|DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS|What is claimed is|CLAIMS|ABSTRACT|CROSS-REFERENCE TO RELATED APPLICATION|FIELD|BACKGROUND|SUMMARY|BRIEF DESCRIPTION THE INVENTION|$)/;\r\n        const descriptionMatches = figRegex.exec(text);\r\n        if (descriptionMatches) {\r\n          const descriptionText = descriptionMatches[1];\r\n\r\n          const imageRegex1 =\r\n            /(?:FIG(?:URE)?)\\.?[-\\s]?(?:\\d+|[IVXLCDM]+)[A-Z]?(?:\\([\\w\\s]+\\))?\\b/gi;\r\n          const matches = descriptionText.match(imageRegex1);\r\n          const uniqueMatches = [...new Set(matches)];\r\n          const matchesWithoutanyWord = uniqueMatches.filter(\r\n            (match) =>\r\n              !/\\bfigured\\b/i.test(match) && !/\\bfiguring\\b/i.test(match)\r\n          );\r\n\r\n          console.log(\"aa\", matchesWithoutanyWord);\r\n          const Rx1 = matchesWithoutanyWord.length;\r\n\r\n\r\n          const figsRomanRegex =\r\n            /FIGS(?:URES?)?\\.\\s(?:\\d+|[IVXLCDM]+)(?:[A-Za-z]?(?:\\sAND\\s(?:\\d+|[IVXLCDM]+)[A-Za-z]?)+)?/i;\r\n\r\n\r\n          const matches2 = descriptionText.match(figsRomanRegex);\r\n          const unique = [...new Set(matches2)];\r\n          console.log(\"aaa\", unique);\r\n          const Rx2 = unique.length * 2;\r\n          const totalFigs = Rx1 + Rx2;\r\n          setImgCount(totalFigs);\r\n\r\n\r\n\r\n        //   const imageRegex =\r\n        //     /FIGS\\.\\s?\\d+([A-Za-z\\(\\)]+)?\\s?(?:to(?!.*and)|-(?!.*and))\\s?\\d+([A-Za-z\\(\\)]+)?/gi;\r\n        //   const matches1 = descriptionText.match(imageRegex);\r\n        //   const uniqueMatches1 = [...new Set(matches1)]; \r\n        //   console.log(\"jii\", uniqueMatches1);\r\n        }\r\n        setFileContent(text);\r\n\r\n        setSentenceCount(text.split(\".\").length);\r\n\r\n        const a = text.split(\"\\n\");\r\n        const b = a.filter((line) => line.trim() !== \"\").length;\r\n        setLineCount(b);\r\n        setErrorMessage(\"\");\r\n      } catch (error) {\r\n        setErrorMessage(\"Error reading the .docx file.\");\r\n      }\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      setErrorMessage(\"Error reading the file.\");\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <button onClick={() => navigate(\"/Mannual\")}>Enter manually</button>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          letterSpacing: 0,\r\n          top: 0,\r\n          width: \"100%\",\r\n          backgroundColor: \"\",\r\n          color: \"white\",\r\n          padding: \"20px\",\r\n          textAlign: \"center\",\r\n          textDecoration: \"underline\",\r\n          textDecorationColor: \"#03e9f4\",\r\n        }}\r\n      >\r\n        <h1>Patent Reader</h1>\r\n      </div>\r\n\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      {errorMessage && <p className=\"error\">{errorMessage}</p>}\r\n\r\n      <div className=\"result\" style={{ marginBottom: \"4%\" }}>\r\n        <p>Title: {modifiedTitle}</p>\r\n        <p> Word Count :{wordCount}</p>\r\n        <p>Character Count :{titleChar}</p>\r\n      </div>\r\n      <div className=\"radio-buttons\" style={{ marginBottom: \"4%\" }}>\r\n        <label className=\"radio\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"radioGroup\"\r\n            value=\"option1\"\r\n            onChange={handleRadioChange}\r\n          />\r\n          All Section Analysis\r\n        </label>\r\n        <label className=\"radio\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"radioGroup\"\r\n            value=\"option2\"\r\n            onChange={handleRadioChange}\r\n          />\r\n          Specific Section Analysis\r\n        </label>\r\n      </div>\r\n      {showResult && (\r\n        <div className=\"result\">\r\n          <p>Cross-Reference :<strong>{crossWord}</strong> </p>\r\n          <p>Technical Field :<strong>{fieldWord}</strong></p>\r\n          <p>Background :<strong>{backgroundWord}</strong></p>\r\n          <p>Summary : <strong>{summaryWord}</strong></p>\r\n          <p>Description of Drawing :<strong> {drofDraWord}</strong></p>\r\n          <p>Total Number of Figures:<strong>{imgCount}</strong></p>\r\n          <p> Detailed Description : <strong>{detaDesWord}</strong></p>\r\n          <p>Claims :<strong>{claimedWord}</strong></p>\r\n          <p>Abstract : <strong>{abstractWord}</strong></p>\r\n          <p>Total lines: <strong>{lineCount}</strong></p>\r\n          <p>\r\n            Total word count: <strong>{fileContent.split(/\\s+/).filter(Boolean).length}</strong>\r\n          </p>\r\n          <p>Total character count: <strong>{fileContent.replace(/\\s/g, \"\").length}</strong></p>\r\n          <p>Total sentence count: <strong>{sentenceCount}</strong></p>\r\n        </div>\r\n      )}\r\n      {showDrop && (\r\n        <div>\r\n          <div>\r\n            <details className=\"custom-dropdown\" style={{ marginBottom: '4%', width: \"100%\" }}>\r\n              <summary onClick={toggleDropdown}>Select Sections</summary>\r\n              {isOpen && (\r\n                <ul className=\"custom-dropdown-list\">\r\n                \r\n                  {sectionData.map((section, index) => (\r\n                    <li key={index}>\r\n\r\n                      <label>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={selectedSections.includes(section.sName)}\r\n                          onChange={() => toggleCheckbox(section.sName)}\r\n                        />\r\n                        <span style={{ marginLeft: '10px' }}>{section.sName}</span>\r\n                      </label>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </details>\r\n          </div>\r\n          <div className=\"result\">\r\n            <div style={{\r\n              textDecoration: \"underline\",\r\n              textDecorationColor: \"#0a0909\",\r\n              marginBottom: '2%'\r\n            }}>\r\n              Word Count of Selected Sections:\r\n            </div>\r\n            {selectedSections.map((sectionName, index) => {\r\n              const selectedSection = sectionData.find(\r\n                (section) => section.sName === sectionName\r\n              );\r\n              return (\r\n                <div key={index}>\r\n                  {`${selectedSection.sName} : `}\r\n                  <strong>{selectedSection.sCount}</strong>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          marginTop: \"2%\",\r\n        }}\r\n      >\r\n        <div>\r\n          <button onClick={() => setShowFileContent(!showFileContent)}>\r\n            {showFileContent ? \"hide\" : \"view\"} content\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <button onClick={() => setShowClaimContent(!showClaimContent)}>\r\n            {showClaimContent ? \"hide\" : \"view\"} Claims\r\n          </button>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      {showFileContent && (\r\n        <div className=\"file-content\" style={{ textAlign: \"center\" }}>\r\n          <h2\r\n            style={{\r\n              color: \"white\",\r\n              textDecoration: \"underline\",\r\n              textDecorationColor: \"#03e9f4\",\r\n            }}\r\n          >\r\n            File Content : {\"  \" + fileName}\r\n          </h2>\r\n          <p\r\n            style={{\r\n              whiteSpace: \"pre-wrap\",\r\n              textAlign: \"left\",\r\n              backgroundColor: \"white\",\r\n              margin: \"0\",\r\n            }}\r\n          >\r\n            {fileContent\r\n              .split(\"\\n\")\r\n              .reduce((acc, line) => {\r\n                const trimmedLine = line.trim();\r\n                const modifiedLine = trimmedLine.replace(\r\n                  /\\[\\d+\\]|\\b(?:[1-4]|[6-9])?\\d{1,}(?:(?<!\\[\\d+)\\b5\\b)?\\b/g,\r\n                  \"\"\r\n                );\r\n                if (modifiedLine) {\r\n                  acc.push(modifiedLine);\r\n                } else if (!acc[acc.length - 1]) {\r\n                  return acc;\r\n                } else {\r\n                  acc.push(\"\");\r\n                }\r\n                return acc;\r\n              }, [])\r\n              .join(\"\\n\")}\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {showClaimContent && (\r\n        <div className=\"claim-content\">\r\n          <h2>CLAIMS:</h2>\r\n          <p>Total Claims:{total}</p>\r\n          <p>Independent Claims:{independent}</p>\r\n          <p>Dependent Claims:{dependent}</p>\r\n          <p>\r\n            <b>Independent Claims List:</b>\r\n          </p>\r\n          <pre>{independentClaimLists}</pre>\r\n          <p>\r\n            <b>Dependent Claims:</b>\r\n          </p>\r\n          <pre>{dependentClaimLists}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Analysis;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}